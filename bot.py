from dotenv import load_dotenv
import os
import json
import asyncio
import time

from aiogram import Dispatcher, Bot
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram import types
from aiogram.filters.command import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton



load_dotenv()

bot = Bot(os.getenv('BOT_TOKEN'))
dp = Dispatcher()

with open('questions.json', 'r', encoding='utf-8') as file:
    questions = json.load(file)['questions']


class QuizStates(StatesGroup):
    ASKING = State()
    ANSWERING = State()

@dp.message(Command('start'))
async def start_command(message: Message, state: FSMContext):
    image = FSInputFile('images/main.jpg')
    start_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer_photo(photo = image,
                               caption = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –Ω–∞ —Ç–µ–º—É –∏—Å—Ç–æ—Ä–∏–∏! –ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è?', reply_markup=start_kb)
    await state.set_state(QuizStates.ASKING)


@dp.message(QuizStates.ASKING)
async def asking(message: Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        await state.update_data(question_index=0, correct_answers=0)
        await ask_question(message, state)
    elif message.text.lower() == '–Ω–µ—Ç':
        await message.answer('–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start.')
        await state.clear()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ "–î–∞" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∏–ª–∏ "–ù–µ—Ç" —á—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
async def ask_question(message: Message, state: FSMContext):
    data = await state.get_data()
    question_index = data['question_index']
    question = questions[question_index]

    options_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=option, callback_data=str(i))] for i, option in enumerate(question["options"])
        ]
    )
    image = FSInputFile(question["image"])
    await message.answer_photo(image, f'{question["question"]}', reply_markup=options_kb)
    await state.set_state(QuizStates.ANSWERING)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
@dp.callback_query(QuizStates.ANSWERING)
async def answering(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    question_index = data['question_index']
    question = questions[question_index]

    user_answer_index = int(callback_query.data)
    user_answer = question["options"][user_answer_index]

    if user_answer == question["correct_answer"]:
        await callback_query.message.answer('–í–µ—Ä–Ω–æ‚úÖ')
        time.sleep(1)
        await state.update_data(correct_answers=data['correct_answers'] + 1)
    else:
        await callback_query.message.answer(f'–ù–µ–≤–µ—Ä–Ω–æ.‚ùå\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{questions[question_index]["correct_answer"]}*', parse_mode="Markdown")
        time.sleep(1)

    if question_index + 1 < len(questions):
        await state.update_data(question_index=question_index + 1)
        await ask_question(callback_query.message, state)
    else:
        score = data['correct_answers']
        await callback_query.message.answer(f'–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!')
        await state.clear()

    await callback_query.answer()

    if score<=5:
            imeg = FSInputFile("images/vvv.jpg")
            await callback_query.message.answer_photo(imeg,f"–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {score} –∏–∑ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤.–ê —Ç—ã —Ç–æ—á–Ω–æ –∂–∏–≤–µ—à—å –≤ –†–æ—Å—Å–∏–∏ –∏ –∏–∑—É—á–∞–µ—à—å –ï–Å –∏—Å—Ç–æ—Ä–∏—é? –ï—Å–ª–∏ –¥–∞, —Ç–æ —Å—Ç–æ–∏—Ç –≤–∑—è—Ç—å –∑–∞ –ø—Ä–∞–≤–∏–ª–æ —á–∏—Ç–∞—Ç—å —É—á–µ–±–Ω–∏–∫ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º üòä –í—Å–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è! –ß—Ç–æ –±—ã –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑, –Ω–∞–∂–º–∏ /start")

    elif score<=10:
            imeg = FSInputFile("images/loox.jpg")
            await callback_query.message.answer_photo(imeg,f"–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {score} –∏–∑ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤.–¢–µ–±–µ —Å—Ç–æ–∏—Ç –≤—Å–ø–æ–º–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã, –æ–Ω–∏ –ø—Ä–æ—à–ª–∏ –º–∏–º–æ —Ç–µ–±—è. –ù–æ –≤—Å–µ –ø–æ–ø—Ä–∞–≤–∏–º–æ! –ù–µ —Å–¥–∞–≤–∞–π—Å—è! –ß—Ç–æ –±—ã –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑, –Ω–∞–∂–º–∏ /start")

    elif score<=15:
            imeg = FSInputFile("images/lxl.jpg")
            await callback_query.message.answer_photo(imeg,f"–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {score} –∏–∑ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤.–í–∞—É, –í–∞—É, –í–∞—É‚Ä¶ –ø—Ä–∏—è—Ç–Ω–æ –≤–∏–¥–µ—Ç—å —Å—Ç–æ–ª—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –ß—Ç–æ –±—ã –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑, –Ω–∞–∂–º–∏ /start")

        #await callback_query.message.answer(f'–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –ø—Ä–∞-–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {score} –∏–∑ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤. –ß—Ç–æ –±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ /start')
    await state.clear()

    await callback_query.answer()



async def main():
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())